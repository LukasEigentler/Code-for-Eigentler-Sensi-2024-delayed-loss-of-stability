%% Compare numerical solution beyond stability boundary with continuation solution
% This script checks whether numerically obtained solutions that have
% crossed the stability boundary in the Busse balloon actually correspond
% to the unstable solutions of the system calculated through numerical
% continuation.

clear; close all;

Anc1 = 1; L = 20;

%% load num cont data
ptw_sol_data = importsolutiondata_klausmeier("../Num_cont/Pattern_generation/output/s.ptw_A"+num2str(Anc1)+"_L"+num2str(L));

N = find(ptw_sol_data(:,1) == 1); % determine no of meshpoints used by AUTO
N = N(1) - 1; 

endind = find(ptw_sol_data(:,1) == 1); endind = endind(1);
sol1 = ptw_sol_data(1:endind,:);

%% load num cont data for higher A para
Anc2 = 1.03;
ptw_sol_data = importsolutiondata_klausmeier("../Num_cont/Pattern_generation/output/s.ptw_A"+strrep(num2str(Anc2),'.','dot')+"_L"+num2str(L));

N = find(ptw_sol_data(:,1) == 1); % determine no of meshpoints used by AUTO
N = N(1) - 1; 

endind = find(ptw_sol_data(:,1) == 1); endind = endind(1);
sol2 = ptw_sol_data(1:endind,:);
%% solve model numerically

m = 5e-3; % rate of change of bifurcation parameter
A_s = 3; A_e = Anc1;
tspan = [0,(A_s-A_e)/m];
kt = linspace(0,tspan(end),10000);
A_vec =  A_s-m*kt; %Rainfall
Astab = 1.69688;

B = 0.45; %Plant loss 
nu = 182.5; % advection speed
d = 500; %Water diffusion

xmax = 200; % half of the space domain
M = 2^10; % no of space points used in discretisation


x=linspace(-xmax,xmax,M);
dx = x(2)-x(1);


% load IC from numcont file
L = 20; Astart = A_s;
start_data_op = importsol_klausmeier("../Num_cont/Pattern_generation/output/s.ptw_A"+strrep(num2str(Astart),'.','dot')+"_L"+strrep(num2str(L),'.','dot'));
start_data_op = start_data_op(1:end-4,:);

ustart = repmat(start_data_op(:,2), 2*xmax/L,1);
wstart = repmat(start_data_op(:,4), 2*xmax/L,1);
xstart = [];
for qq = 1:2*xmax/L
    xstart = [xstart;(qq-1)*L+L*start_data_op(:,1)];
end
xstart = xstart - xmax;


ustart = interp1(xstart,ustart,x); ustart(end) = ustart(1);
wstart = interp1(xstart,wstart,x); wstart(end) = wstart(1);
vin = [ustart,wstart];




% ODE Solver

options = odeset('Stats', 'on', 'MaxStep',0.1); % max step size needed to capture changing parameter over time!
tic
[t_out,v] = ode15s(@(t,v) klausmeierode(t,v,B,nu,d,M,dx,kt,A_vec), tspan, vin, options);
toc
solns = v(end,:);

%%
f = figure;
subplot(2,1,1)
[maxu,maxind1] = max(sol1(:,2));
p(1) = plot(L*(sol1(:,1)-sol1(maxind1,1)), sol1(:,2), "DisplayName","Continuation, $A = "+num2str(Anc1)+"$");
hold on
grid on
[~,maxind2] = max(sol2(:,2));
p(2) = plot(L*(sol2(:,1)-sol2(maxind2,1)), sol2(:,2), '--', "DisplayName","Continuation, $A = "+num2str(Anc2)+"$");
[~,maxindns] = max(solns(1:M));
p(3) = plot(x-x(maxindns), solns(1:M), "DisplayName","Simulation, $A = "+num2str(Anc1)+ ", m = "+num2str(m) +"$");
xlabel("Space, $x$", "Interpreter","latex")
ylabel("Plants, $u(x,t)$", "Interpreter","latex")
xlim([-L,L])
leg = legend(p); set(leg,"Interpreter", "latex")
ylim([0,1.2*maxu])

subplot(2,1,2)
plot(L*(sol1(:,1)-sol1(maxind1,1)), sol1(:,4))
hold on
grid on
plot(L*(sol2(:,1)-sol2(maxind2,1)), sol2(:,4),'--')
plot(x-x(maxindns), solns(M+1:2*M))
xlabel("Space, $x$", "Interpreter","latex")
ylabel("Water, $w(x,t)$", "Interpreter","latex")
xlim([-L,L])


